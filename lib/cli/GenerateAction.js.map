{"version":3,"file":"GenerateAction.js","sourceRoot":"","sources":["../../src/cli/GenerateAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAG7B,6CAA0C;AAC1C,sEAAmE;AAGnE,oEAA0D;AAC1D,0EAAuE;AAEvE,MAAa,cAAe,SAAQ,uBAAU;IAC5C,YAAmB,MAAgC;QACjD,KAAK,CAAC;YACJ,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,wDAAwD;YACjE,aAAa,EACX,yDAAyD;gBACzD,mDAAmD;SACtD,CAAC,CAAC;IACL,CAAC;IAES,SAAS;QACjB,WAAW;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAEvE,+BAA+B;QAC/B,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YACtC,gDAAgD;YAChD,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,mCAAgB,CAAC,QAAQ,CAAC,CAAC;YAC/E,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;gBACtC,MAAM,IAAI,KAAK,CACb,kBAAkB,mCAAgB,CAAC,QAAQ,mDAAmD,CAC/F,CAAC;aACH;SACF;QAED,MAAM,gBAAgB,GAAqB,mCAAgB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAErF,MAAM,QAAQ,GAAa,IAAI,CAAC,aAAa,EAAE,CAAC;QAEhD,IAAI,gBAAgB,CAAC,UAAU,CAAC,YAAY,KAAK,UAAU,EAAE;YAC3D,MAAM,kBAAkB,GAAuB,IAAI,uCAAkB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAClG,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACrD;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,iBAAiB,gBAAgB,CAAC,UAAU,CAAC,YAAY,sDAAsD,CAAC,CAAC;SAClI;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAxCD,wCAwCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport { ApiDocumenterCommandLine } from './ApiDocumenterCommandLine';\r\nimport { BaseAction } from './BaseAction';\r\nimport { DocumenterConfig } from '../documenters/DocumenterConfig';\r\n\r\nimport { ApiModel } from '@microsoft/api-extractor-model';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\nimport { MarkdownDocumenter } from '../documenters/MarkdownDocumenter';\r\n\r\nexport class GenerateAction extends BaseAction {\r\n  public constructor(parser: ApiDocumenterCommandLine) {\r\n    super({\r\n      actionName: 'generate',\r\n      summary: 'generate markdown documentation based on a config file',\r\n      documentation:\r\n        'Config file driven mode of operation for API Documenter' +\r\n        ' Set --config --input-folder and --output-folder.'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    // override\r\n    this.setConfigPath();\r\n    let configFilePath: string = path.join(process.cwd(), this.configPath);\r\n\r\n    // First try the current folder\r\n    if (!FileSystem.exists(configFilePath)) {\r\n      // Otherwise try the standard \"config\" subfolder\r\n      configFilePath = path.join(process.cwd(), 'config', DocumenterConfig.FILENAME);\r\n      if (!FileSystem.exists(configFilePath)) {\r\n        throw new Error(\r\n          `Unable to find ${DocumenterConfig.FILENAME} in the current folder or in a \"config\" subfolder`\r\n        );\r\n      }\r\n    }\r\n\r\n    const documenterConfig: DocumenterConfig = DocumenterConfig.loadFile(configFilePath);\r\n\r\n    const apiModel: ApiModel = this.buildApiModel();\r\n\r\n    if (documenterConfig.configFile.outputTarget === 'markdown') {\r\n      const markdownDocumenter: MarkdownDocumenter = new MarkdownDocumenter(apiModel, documenterConfig);\r\n      markdownDocumenter.generateFiles(this.outputFolder);\r\n    } else {\r\n      throw new Error(`output target ${documenterConfig.configFile.outputTarget} is not supported in this version of api-documenter.`);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"]}